{
 "metadata": {
  "name": "",
  "signature": "sha256:ea112f163d26da6a3d696e45908f3528cdff984d280738aed334a991486309c9"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import pandas as pd\n",
      "from radd import utils, psy, qsim, ss, simfx\n",
      "import seaborn as sns\n",
      "from lmfit import minimize, Parameters, Parameter, report_fit, Minimizer, fit_report\n",
      "%matplotlib\n",
      "from numpy import *\n",
      "import numpy as np"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Using matplotlib backend: MacOSX\n"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "pth=utils.find_path()\n",
      "simdf=pd.read_csv(pth+\"CoAx/SS/ReSSV_Sims/Nested/800trials_50maxfun/SxFitSummary.csv\")\n",
      "data=pd.read_csv(pth+\"CoAx/SS/Reactive/Re_AllData.csv\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rePar=pd.read_csv(pth+\"CoAx/SS/HDDM/Reactive/vbias_full/vBP_SxStats.csv\")\n",
      "paramdf=rePar.query('subj_idx!=[39, 66, 69]')\n",
      "#proPar=pd.read_csv(pth+\"HDDM/Proactive/vfull_sx/vfull_HiLo_550_SxStats.csv\")\n",
      "\n",
      "#slice a few subjects for testing\n",
      "testdf=paramdf.query('subj_idx==[28, 29, 30]')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "F(x) for opt DDM parameters on Flat Data (ssRe Nested Pools, all sx collapsed)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def get_sx_params(sxdf):\n",
      "    \n",
      "    params=sxdf['mean']; params.index=sxdf['param']\n",
      "    a=params['a']*.1\n",
      "    z=a*params['z']\n",
      "    v=params['v(bsl)']*.1\n",
      "    \n",
      "    sp={'ssTer':0.0, 'ssTer_var':0.0, 'pGo':0.0}\n",
      "    gp={'a':a, 'v':v, 'z':z, 'Ter':params['t'], 'eta':params['sv'], 'st':0.0, 'sz':0.0}\n",
      "    \n",
      "    return [gp, sp]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 4
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ss=reload(ss); simfx=reload(simfx)\n",
      "\n",
      "def raddMinFunc(p, ydata, ntrials=1000):\n",
      "\n",
      "    gp={'eta':0.14, 'st':0.001, 'sz':0.01}\n",
      "    sp={'ssTer':0.0, 'ssTer_var':0.0,'pGo':.5}\n",
      "    \n",
      "    ssdlist=np.arange(.20, .45, .05)\n",
      "    \n",
      "    sp['mu_ss'] = p['mu_ss'].value\n",
      "    gp['v'] = p['v'].value\n",
      "    gp['a'] = p['a'].value\n",
      "    gp['z'] = p['z'].value\n",
      "    gp['Ter'] =  p['Ter'].value\n",
      "    \n",
      "    simdf_list=[]\n",
      "    for ssd in ssdlist:\n",
      "\n",
      "        sp['ssd']=ssd\n",
      "        \n",
      "        out=ss.set_model(gParams=gp, sParams=sp, mfx=simfx.sim_radd, ntrials=ntrials, \n",
      "                         timebound=.650, depHyper=True, visual=False, task='ssRe', \n",
      "                         return_all_beh=True, condition_str='bsl') \n",
      "\n",
      "        simdf_list.append(out)\n",
      "\n",
      "    simdf=pd.concat(simdf_list)\n",
      "    ym=simdf.groupby('ssd').mean()['acc'].values\n",
      "\n",
      "    residuals=ym-ydata\n",
      "    \n",
      "    print residuals\n",
      "    \n",
      "    return residuals\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "simfx=reload(simfx); ss=reload(ss)\n",
      "#def fit_model(data, dep={}, params=[], intervar=False, ntrials=1000, maxiter=100):\n",
      "\n",
      "#gp={'a':0.125, 'z':0.063, 'v':0.223, 'Ter':0.435, 'eta':0.133, 'st':0.183, 'sz':0.037}\n",
      "#sp={'mu_ss':0., 'pGo':0.5, 'ssd':0.}\n",
      "\n",
      "#free=dep.keys\n",
      "#cond=dep.values\n",
      "#pb=utils.PBinJ(n, color=\"#4168B7\")\n",
      "\n",
      "#fitdf=pd.DataFrame(columns=['residuals', 'ydata', 'yhat', 'chisq', 'redchi','sse'], \n",
      "#           index=data.subj_idx.unique())\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "ydata=data.groupby('ssd').mean()['acc'].values[:-1]\n",
      "\n",
      "ntrials=2000; #maxiter=100\n",
      "\n",
      "p=Parameters()\n",
      "\n",
      "p.add('a', value=.37, min=0.0, max=.8)\n",
      "p.add('v', value=.611, min=0.0, max=2.0)\n",
      "p.add('Ter', value=.2, min=0.0, max=.65)\n",
      "p.add('z', value=.13, min=.01, max=.1)\n",
      "\n",
      "p.add('mu_ss', value=-2.0, min=-5, max=-.01)\n",
      "\n",
      "#if intervar:\n",
      "#\n",
      "#    p.add('eta', value=inits[sx], min=0.1, max=2.5)\n",
      "#    p.add('st', value=inits[sx], min=0.1, max=2.5)\n",
      "#    p.add('sv', value=inits[sx], min=0.1, max=2.5)\n",
      "\n",
      "\n",
      "theta = Minimizer(raddMinFunc, p, fcn_args=(ydata,ntrials), \n",
      "            kws={\"full_output\":True, \"disp\":True, \"retall\":True}) \n",
      "\n",
      "p_fit=theta.prepare_fit()\n",
      "\n",
      "init = raddMinFunc(p, ydata, ntrials)\n",
      "pylab.plot(np.arange(len(init)), init, 'b--')\n",
      "#fitt=theta.lbfgsb(kw)\n",
      "print(fit_report(p))\n",
      "#fitdf.loc[sx]=pd.Series({'ssd':np.arange(.20, .45, .05), \n",
      "#\"residuals\":theta.residual,\"ydata\":ydata.astype('float'),\n",
      "#'yhat':ydata+theta.residual,\"chisq\":theta.chisqr,\"redchi\":\n",
      "#theta.redchi, 'sse':np.sum([i**2 for i in theta.residual])})\n",
      "\n",
      "#return theta"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[-0.21785246 -0.21251639 -0.14056557  0.20290984  0.52828689]\n",
        "[[Variables]]\n",
        "     Ter:       0.2 initial =  0.2\n",
        "     a:         0.37 initial =  0.37\n",
        "     mu_ss:    -2 initial = -2\n",
        "     v:         0.611 initial =  0.611\n",
        "     z:         0.1 initial =  0.1\n",
        "[[Correlations]] (unreported correlations are <  0.100)\n"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nuvfrGt1/skiSStr9968K7CuvbObf/i1b7JKKypm2JKkk3XUXHHxwLZ2dcNVVzey+++gObHCmLUkq\nUUuXQjoNCxYY2Cs505YklaR994WttmrkQx/ywyJXcqYtSSpZBvbqDG1JkhLC0JYkFd3dd2d4+OFM\nscsoeZ7TliQV1f/8T4bDDqtl3Lgcjz/eyNixxa6odDnTliQVzZ135gM7k4HLLmsxsNfC0JYkFcUf\n/rAqsK+9tpkZM7yta21cHpckjbh33klxxBG1VFTAr3/dzPTpBvZAGNqSpBG3wQY5LrmkhfXWy7Hz\nzgb2QBnakqSi2GOPjmKXkDie05YkKSEMbUnSsHv33WJXUB4MbUnSsPrd7yqYNm0sf/yjm6cMlqEt\nSRo2//3fFXzjGzUA1Na6j/hgGdqSpGFxyy0VHHFEDbW18JvfNPGZz3QWu6TEM7QlSUPullsqOOqo\nGurq4MYbm9h+ewN7KBjakqQhN3ZsjgkTctx4YxPTphnYQ8X7tCVJQ2733bM8/ngjY8YUu5Ly4kxb\nkjQsDOyhZ2hLkpQQhrYkaVBuvLGCu+7yHuyR4DltSVLBbrihgu98p4b6+hyPPdZIXV2xKypvzrQl\nSQVZGdjjx8N11zUb2CPA0JYkrbPrr88H9vrrw003NfHpT3tb10gwtCVJ6+Stt1KcdFI+sBcubGLr\nrQ3skeI5bUnSOvnwh3NcfXUzEyfm2GorA3skGdqSpHU2Y0a22CWMSi6PS5KUEIa2JKlff/tbqtgl\nqIuhLUlaoyuuqGTHHcdw551unlIKDG1JUp8uv7ySE0+sYb31cnzsY7lilyMMbUlSHy6/vJKTTqqh\nvr6TRYuaCcGrxEuBV49LklZzxRWrB/YnPmFglwpn2pKk1WyxRSeTJ3dyyy0Gdqlxpi1JWs1OO2V5\n6KFGKiuLXYl6cqYtSerFwC5NhrYkSQlhaEvSKHbxxZXceqtnSpPCkZKkUeqii6r4yU+q2XTTTmbO\n7KCmptgVaW0MbUkahS68sIqf/rSaTTbp5Le/bTKwE8LQlqRRZv78Kn72s3xgL1rUxOTJ7naWFJ7T\nlqRR5I03UsyfX8WkSQZ2EjnTlqRRZKONctx4YxP19e4nnkSGtiSNMtOmuctZUrk8LklSQhjaklTG\n/u///DVfThxNSSpDuRycfXYVu+1Wx+9+55nQcmFoS1KZWRnY551Xzaab5thuu2yxS9IQ8c8vSSoj\n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\nRU5ErkJggg==\n",
       "text": [
        "<matplotlib.figure.Figure at 0x7f095deba6d0>"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Run Fits"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ss=reload(ss); simfx=reload(simfx)\n",
      "\n",
      "#theta=fit_model(data)\n",
      "theta.values"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 25,
       "text": [
        "{'Ter': 0.33966004089559476,\n",
        " 'a': 0.12487766930265071,\n",
        " 'mu_ss': 0.11871826121265183,\n",
        " 'v': 0.061741413063797546,\n",
        " 'z': 0.039870091795177066}"
       ]
      }
     ],
     "prompt_number": 25
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p.update"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 31,
       "text": [
        "<bound method Parameters.update of Parameters([('a', <Parameter 'a', 0.37, bounds=[0.0:0.8]>), ('v', <Parameter 'v', 0.611, bounds=[0.0:2.0]>), ('Ter', <Parameter 'Ter', 0.347, bounds=[0.0:0.65]>), ('z', <Parameter 'z', 0.1, bounds=[0.01:0.1]>), ('mu_ss', <Parameter 'mu_ss', 2.0, bounds=[0.01:4.0]>)])>"
       ]
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "timebound=0.653; task='ssRe'; visual=False;\n",
      "exp_scale=[12, 12.29]; depHyper=True; save=False; return_all_beh=True; condition_str=None; return_all=False"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "simfx=reload(simfx); ss=reload(ss)\n",
      "\n",
      "#globals\n",
      "a=.37; z=.5*a; Ter=.347; eta=.14; st=.0001; sz=.0001; s2=.01; xpo=[12, 12.29]\n",
      "mu_ss=-2.17; ssTer=.099; ssRe_TB=.653; ssPro_TB=.6; nt=3000; sTB=.00001; ssTer_var=.0001\n",
      "\n",
      "#ssRe\n",
      "ssdlist=[.4, .35, .3, .25, .20]\n",
      "#ssPro\n",
      "pGo_list=[0, .2, .4, .6, .8, 1]\n",
      "pSSD=.450\n",
      "vlist_bsl=[0.073, 0.26, 0.4385, 0.601, 0.93, 1.09]\n",
      "vlist_pnl=[0.05, 0.23, 0.425, 0.601, 0.93, 1.09]\n",
      "\n",
      "gp={'a':a, 'v':.611, 'z':z, 'Ter':Ter, 'eta':eta, 'st':st, 'sz':sz}\n",
      "\n",
      "for ssd in ssdlist:\n",
      "    sp={'mu_ss':mu_ss,'ssd':ssd, 'ssTer':.100, 'ssTer_var':0.0, 'pGo':0.5}\n",
      "    \n",
      "    \n",
      "    pStop=1-sp['pGo']\n",
      "    gp, sp = ss.get_intervar_ranges(parameters={'gp':gp, 'sp':sp})\n",
      "\n",
      "    if return_all or visual:\n",
      "        columns=[\"rt\",\"choice\",\"acc\",\"go_tsteps\", \"go_paths\",\"ss_tsteps\",\"thalamus\",\n",
      "            \"ss_paths\", \"len_go_tsteps\",\"len_ss_tsteps\",\"trial_type\"]\n",
      "    else:\n",
      "        columns=['rt', 'choice', 'acc', 'trial_type', 'ssd', 'pGo']\n",
      "\n",
      "    df = pd.DataFrame(columns=columns, index=np.arange(0,1000))\n",
      "\n",
      "    for i in range(1000):\n",
      "\n",
      "        ss_bool=False\n",
      "        trial_type='go'\n",
      "        if np.random.random_sample()<=pStop:\n",
      "            ss_bool=True\n",
      "            trial_type='stop'\n",
      "\n",
      "        gp, sp, tb = ss.update_params(gp, sp, timebound)\n",
      "\n",
      "        sim_out = simfx.sim_radd(gp['mu'], gp['TR'], gp['a'], gp['ZZ'], \n",
      "                                 mu_ss=sp['mu_ss'], ssd=sp['ss_On'], depHyper=depHyper, \n",
      "                                 timebound=tb, exp_scale=exp_scale, ss_trial=ss_bool, sp=sp)\t\n",
      "\n",
      "        df.loc[i]=pd.Series({c:sim_out[c] for c in columns})\n",
      "\n",
      "\n",
      "    out=ss.set_model(gParams=gp, sParams=sp, mfx=simfx.sim_radd, ntrials=1000,timebound=.650, \n",
      "                     depHyper=True, visual=True, task='ssRe', condition_str='bsl') "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "ename": "AssertionError",
       "evalue": "",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
        "\u001b[0;32m<ipython-input-20-ecf23f3339ac>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     42\u001b[0m         sim_out = simfx.sim_radd(gp['mu'], gp['TR'], gp['a'], gp['ZZ'], \n\u001b[1;32m     43\u001b[0m                                  \u001b[0mmu_ss\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msp\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'mu_ss'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mssd\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msp\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'ss_On'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdepHyper\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdepHyper\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 44\u001b[0;31m                                  timebound=tb, exp_scale=exp_scale, ss_trial=ss_bool, sp=sp)\t\n\u001b[0m\u001b[1;32m     45\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m         \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSeries\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0msim_out\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mc\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m/Users/kyle/anaconda/lib/python2.7/site-packages/numba/dispatcher.pyc\u001b[0m in \u001b[0;36m_compile_for_args\u001b[0;34m(self, *args, **kws)\u001b[0m\n\u001b[1;32m    141\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mgiven\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m*\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mkws\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mreturn\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mresulting\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    142\u001b[0m         \"\"\"\n\u001b[0;32m--> 143\u001b[0;31m         \u001b[0;32massert\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mkws\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    144\u001b[0m         \u001b[0msig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtypeof_pyval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    145\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;31mAssertionError\u001b[0m: "
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Misc data summarizing"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "allcor=data.query(\"acc==1&Cond=='bsl'\")\n",
      "\n",
      "rt_mu=pd.pivot_table(allcor, index='ssd', columns='subj_idx', values='rt', aggfunc=np.mean).T.mean()  \n",
      "rt_var=pd.pivot_table(allcor, index='ssd', columns='subj_idx', values='rt', aggfunc=np.var).T.mean()\n",
      "rtdata=pd.concat([mu, var], axis=1)\n",
      "rtdata.columns=['mu', 'var']    \n",
      "    \n",
      "accm=pd.pivot_table(data, index='ssd', columns='subj_idx', values='acc', aggfunc=np.mean).T.mean()  \n",
      "accv=pd.pivot_table(data, index='ssd', columns='subj_idx', values='acc', aggfunc=np.var).T.mean()\n",
      "accdata=pd.concat([accm, accv], axis=1)\n",
      "accdata.columns=['mu', 'var']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 35
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sns.set_context('talk', font_scale=1.2)\n",
      "plt.errorbar(x=accdata.index.values[:-1], y=accdata['mu'].values[:-1], yerr=accdata['var'].values[:-1])\n",
      "plt.setp(plt.gca(), ylim=(0, 1.1), xlim=(190, 410))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 62,
       "text": [
        "[0, 1.1, 190, 410]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x111970050>"
       ]
      }
     ],
     "prompt_number": 62
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "pd.pivot_table(data, index='ssd', columns='subj_idx', values='rt', aggfunc=np.var).T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}